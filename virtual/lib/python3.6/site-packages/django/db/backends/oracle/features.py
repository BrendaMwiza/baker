from django.db.backends.base.features import BaseDatabaseFeatures
from django.db.utils import InterfaceError
<<<<<<< HEAD


class DatabaseFeatures(BaseDatabaseFeatures):
    empty_fetchmany_value = ()
    interprets_empty_strings_as_nulls = True
    uses_savepoints = True
    has_select_for_update = True
    has_select_for_update_nowait = True
    has_select_for_update_skip_locked = True
    can_return_id_from_insert = True
    allow_sliced_subqueries = False
=======
from django.utils.functional import cached_property


class DatabaseFeatures(BaseDatabaseFeatures):
    interprets_empty_strings_as_nulls = True
    has_select_for_update = True
    has_select_for_update_nowait = True
    has_select_for_update_skip_locked = True
    has_select_for_update_of = True
    select_for_update_of_column = True
    can_return_id_from_insert = True
    can_introspect_autofield = True
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
    supports_subqueries_in_group_by = False
    supports_transactions = True
    supports_timezones = False
    has_native_duration_field = True
    can_defer_constraint_checks = True
    supports_partially_nullable_unique_constraints = False
    truncates_names = True
<<<<<<< HEAD
    has_bulk_insert = True
    supports_tablespaces = True
    supports_sequence_reset = False
=======
    supports_tablespaces = True
    supports_sequence_reset = False
    can_introspect_materialized_views = True
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
    can_introspect_time_field = False
    atomic_transactions = False
    supports_combined_alters = False
    nulls_order_largest = True
    requires_literal_defaults = True
    closed_cursor_error_class = InterfaceError
    bare_select_suffix = " FROM DUAL"
<<<<<<< HEAD
    uppercases_column_names = True
=======
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
    # select for update with limit can be achieved on Oracle, but not with the current backend.
    supports_select_for_update_with_limit = False
    supports_temporal_subtraction = True
    # Oracle doesn't ignore quoted identifiers case but the current backend
    # does by uppercasing all identifiers.
    ignores_table_name_case = True
<<<<<<< HEAD

    def introspected_boolean_field_type(self, field=None, created_separately=False):
        """
        Some versions of Oracle -- we've seen this on 11.2.0.1 and suspect
        it goes back -- have a weird bug where, when an integer column is
        added to an existing table with a default, its precision is later
        reported on introspection as 0, regardless of the real precision.
        For Django introspection, this means that such columns are reported
        as IntegerField even if they are really BigIntegerField or BooleanField.

        The bug is solved in Oracle 11.2.0.2 and up.
        """
        if self.connection.oracle_full_version < '11.2.0.2' and field and field.has_default() and created_separately:
            return 'IntegerField'
        return super(DatabaseFeatures, self).introspected_boolean_field_type(field, created_separately)
=======
    supports_index_on_text_field = False
    has_case_insensitive_like = False
    create_test_procedure_without_params_sql = """
        CREATE PROCEDURE "TEST_PROCEDURE" AS
            V_I INTEGER;
        BEGIN
            V_I := 1;
        END;
    """
    create_test_procedure_with_int_param_sql = """
        CREATE PROCEDURE "TEST_PROCEDURE" (P_I INTEGER) AS
            V_I INTEGER;
        BEGIN
            V_I := P_I;
        END;
    """
    supports_callproc_kwargs = True
    supports_over_clause = True
    supports_ignore_conflicts = False
    max_query_params = 2**16 - 1
    supports_partial_indexes = False
    allows_multiple_constraints_on_same_fields = False

    @cached_property
    def has_fetch_offset_support(self):
        return self.connection.oracle_version >= (12, 2)

    @cached_property
    def allow_sliced_subqueries_with_in(self):
        return self.has_fetch_offset_support

    @cached_property
    def supports_slicing_ordering_in_compound(self):
        return self.has_fetch_offset_support
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
