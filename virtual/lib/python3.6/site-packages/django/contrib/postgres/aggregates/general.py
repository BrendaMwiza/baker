<<<<<<< HEAD
from django.contrib.postgres.fields import JSONField
from django.db.models.aggregates import Aggregate

=======
from django.contrib.postgres.fields import ArrayField, JSONField
from django.db.models.aggregates import Aggregate

from .mixins import OrderableAggMixin

>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
__all__ = [
    'ArrayAgg', 'BitAnd', 'BitOr', 'BoolAnd', 'BoolOr', 'JSONBAgg', 'StringAgg',
]


<<<<<<< HEAD
class ArrayAgg(Aggregate):
    function = 'ARRAY_AGG'

    def convert_value(self, value, expression, connection, context):
=======
class ArrayAgg(OrderableAggMixin, Aggregate):
    function = 'ARRAY_AGG'
    template = '%(function)s(%(distinct)s%(expressions)s %(ordering)s)'
    allow_distinct = True

    @property
    def output_field(self):
        return ArrayField(self.source_expressions[0].output_field)

    def convert_value(self, value, expression, connection):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if not value:
            return []
        return value


class BitAnd(Aggregate):
    function = 'BIT_AND'


class BitOr(Aggregate):
    function = 'BIT_OR'


class BoolAnd(Aggregate):
    function = 'BOOL_AND'


class BoolOr(Aggregate):
    function = 'BOOL_OR'


class JSONBAgg(Aggregate):
    function = 'JSONB_AGG'
<<<<<<< HEAD
    _output_field = JSONField()

    def convert_value(self, value, expression, connection, context):
=======
    output_field = JSONField()

    def convert_value(self, value, expression, connection):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if not value:
            return []
        return value


<<<<<<< HEAD
class StringAgg(Aggregate):
    function = 'STRING_AGG'
    template = "%(function)s(%(distinct)s%(expressions)s, '%(delimiter)s')"

    def __init__(self, expression, delimiter, distinct=False, **extra):
        distinct = 'DISTINCT ' if distinct else ''
        super(StringAgg, self).__init__(expression, delimiter=delimiter, distinct=distinct, **extra)

    def convert_value(self, value, expression, connection, context):
=======
class StringAgg(OrderableAggMixin, Aggregate):
    function = 'STRING_AGG'
    template = "%(function)s(%(distinct)s%(expressions)s, '%(delimiter)s'%(ordering)s)"
    allow_distinct = True

    def __init__(self, expression, delimiter, **extra):
        super().__init__(expression, delimiter=delimiter, **extra)

    def convert_value(self, value, expression, connection):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if not value:
            return ''
        return value
