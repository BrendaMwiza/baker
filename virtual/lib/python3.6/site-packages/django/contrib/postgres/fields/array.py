import json

from django.contrib.postgres import lookups
from django.contrib.postgres.forms import SimpleArrayField
from django.contrib.postgres.validators import ArrayMaxLengthValidator
from django.core import checks, exceptions
from django.db.models import Field, IntegerField, Transform
from django.db.models.lookups import Exact, In
<<<<<<< HEAD
from django.utils import six
from django.utils.translation import ugettext_lazy as _

from ..utils import prefix_validation_error
=======
from django.utils.inspect import func_supports_parameter
from django.utils.translation import gettext_lazy as _

from ..utils import prefix_validation_error
from .mixins import CheckFieldDefaultMixin
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
from .utils import AttributeSetter

__all__ = ['ArrayField']


<<<<<<< HEAD
class ArrayField(Field):
    empty_strings_allowed = False
    default_error_messages = {
        'item_invalid': _('Item %(nth)s in the array did not validate: '),
        'nested_array_mismatch': _('Nested arrays must have the same length.'),
    }
=======
class ArrayField(CheckFieldDefaultMixin, Field):
    empty_strings_allowed = False
    default_error_messages = {
        'item_invalid': _('Item %(nth)s in the array did not validate:'),
        'nested_array_mismatch': _('Nested arrays must have the same length.'),
    }
    _default_hint = ('list', '[]')
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

    def __init__(self, base_field, size=None, **kwargs):
        self.base_field = base_field
        self.size = size
        if self.size:
<<<<<<< HEAD
            self.default_validators = self.default_validators[:]
            self.default_validators.append(ArrayMaxLengthValidator(self.size))
=======
            self.default_validators = [*self.default_validators, ArrayMaxLengthValidator(self.size)]
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        # For performance, only add a from_db_value() method if the base field
        # implements it.
        if hasattr(self.base_field, 'from_db_value'):
            self.from_db_value = self._from_db_value
<<<<<<< HEAD
        super(ArrayField, self).__init__(**kwargs)
=======
        super().__init__(**kwargs)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

    @property
    def model(self):
        try:
            return self.__dict__['model']
        except KeyError:
            raise AttributeError("'%s' object has no attribute 'model'" % self.__class__.__name__)

    @model.setter
    def model(self, model):
        self.__dict__['model'] = model
        self.base_field.model = model

    def check(self, **kwargs):
<<<<<<< HEAD
        errors = super(ArrayField, self).check(**kwargs)
=======
        errors = super().check(**kwargs)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if self.base_field.remote_field:
            errors.append(
                checks.Error(
                    'Base field for array cannot be a related field.',
                    obj=self,
                    id='postgres.E002'
                )
            )
        else:
            # Remove the field name checks as they are not needed here.
            base_errors = self.base_field.check()
            if base_errors:
                messages = '\n    '.join('%s (%s)' % (error.msg, error.id) for error in base_errors)
                errors.append(
                    checks.Error(
                        'Base field for array has errors:\n    %s' % messages,
                        obj=self,
                        id='postgres.E001'
                    )
                )
        return errors

    def set_attributes_from_name(self, name):
<<<<<<< HEAD
        super(ArrayField, self).set_attributes_from_name(name)
=======
        super().set_attributes_from_name(name)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        self.base_field.set_attributes_from_name(name)

    @property
    def description(self):
        return 'Array of %s' % self.base_field.description

    def db_type(self, connection):
        size = self.size or ''
        return '%s[%s]' % (self.base_field.db_type(connection), size)

<<<<<<< HEAD
    def get_db_prep_value(self, value, connection, prepared=False):
        if isinstance(value, list) or isinstance(value, tuple):
=======
    def get_placeholder(self, value, compiler, connection):
        return '%s::{}'.format(self.db_type(connection))

    def get_db_prep_value(self, value, connection, prepared=False):
        if isinstance(value, (list, tuple)):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            return [self.base_field.get_db_prep_value(i, connection, prepared=False) for i in value]
        return value

    def deconstruct(self):
<<<<<<< HEAD
        name, path, args, kwargs = super(ArrayField, self).deconstruct()
=======
        name, path, args, kwargs = super().deconstruct()
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if path == 'django.contrib.postgres.fields.array.ArrayField':
            path = 'django.contrib.postgres.fields.ArrayField'
        kwargs.update({
            'base_field': self.base_field.clone(),
            'size': self.size,
        })
        return name, path, args, kwargs

    def to_python(self, value):
<<<<<<< HEAD
        if isinstance(value, six.string_types):
=======
        if isinstance(value, str):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            # Assume we're deserializing
            vals = json.loads(value)
            value = [self.base_field.to_python(val) for val in vals]
        return value

<<<<<<< HEAD
    def _from_db_value(self, value, expression, connection, context):
        if value is None:
            return value
        return [
            self.base_field.from_db_value(item, expression, connection, context)
=======
    def _from_db_value(self, value, expression, connection):
        if value is None:
            return value
        return [
            self.base_field.from_db_value(item, expression, connection, {})
            if func_supports_parameter(self.base_field.from_db_value, 'context')  # RemovedInDjango30Warning
            else self.base_field.from_db_value(item, expression, connection)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            for item in value
        ]

    def value_to_string(self, obj):
        values = []
        vals = self.value_from_object(obj)
        base_field = self.base_field

        for val in vals:
            if val is None:
                values.append(None)
            else:
                obj = AttributeSetter(base_field.attname, val)
                values.append(base_field.value_to_string(obj))
        return json.dumps(values)

    def get_transform(self, name):
<<<<<<< HEAD
        transform = super(ArrayField, self).get_transform(name)
=======
        transform = super().get_transform(name)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        if transform:
            return transform
        if '_' not in name:
            try:
                index = int(name)
            except ValueError:
                pass
            else:
                index += 1  # postgres uses 1-indexing
                return IndexTransformFactory(index, self.base_field)
        try:
            start, end = name.split('_')
            start = int(start) + 1
            end = int(end)  # don't add one here because postgres slices are weird
        except ValueError:
            pass
        else:
            return SliceTransformFactory(start, end)

    def validate(self, value, model_instance):
<<<<<<< HEAD
        super(ArrayField, self).validate(value, model_instance)
=======
        super().validate(value, model_instance)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        for index, part in enumerate(value):
            try:
                self.base_field.validate(part, model_instance)
            except exceptions.ValidationError as error:
                raise prefix_validation_error(
                    error,
                    prefix=self.error_messages['item_invalid'],
                    code='item_invalid',
<<<<<<< HEAD
                    params={'nth': index},
=======
                    params={'nth': index + 1},
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
                )
        if isinstance(self.base_field, ArrayField):
            if len({len(i) for i in value}) > 1:
                raise exceptions.ValidationError(
                    self.error_messages['nested_array_mismatch'],
                    code='nested_array_mismatch',
                )

    def run_validators(self, value):
<<<<<<< HEAD
        super(ArrayField, self).run_validators(value)
=======
        super().run_validators(value)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        for index, part in enumerate(value):
            try:
                self.base_field.run_validators(part)
            except exceptions.ValidationError as error:
                raise prefix_validation_error(
                    error,
                    prefix=self.error_messages['item_invalid'],
                    code='item_invalid',
<<<<<<< HEAD
                    params={'nth': index},
                )

    def formfield(self, **kwargs):
        defaults = {
            'form_class': SimpleArrayField,
            'base_field': self.base_field.formfield(),
            'max_length': self.size,
        }
        defaults.update(kwargs)
        return super(ArrayField, self).formfield(**defaults)
=======
                    params={'nth': index + 1},
                )

    def formfield(self, **kwargs):
        return super().formfield(**{
            'form_class': SimpleArrayField,
            'base_field': self.base_field.formfield(),
            'max_length': self.size,
            **kwargs,
        })
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc


@ArrayField.register_lookup
class ArrayContains(lookups.DataContains):
    def as_sql(self, qn, connection):
<<<<<<< HEAD
        sql, params = super(ArrayContains, self).as_sql(qn, connection)
=======
        sql, params = super().as_sql(qn, connection)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        sql = '%s::%s' % (sql, self.lhs.output_field.db_type(connection))
        return sql, params


@ArrayField.register_lookup
class ArrayContainedBy(lookups.ContainedBy):
    def as_sql(self, qn, connection):
<<<<<<< HEAD
        sql, params = super(ArrayContainedBy, self).as_sql(qn, connection)
=======
        sql, params = super().as_sql(qn, connection)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        sql = '%s::%s' % (sql, self.lhs.output_field.db_type(connection))
        return sql, params


@ArrayField.register_lookup
class ArrayExact(Exact):
    def as_sql(self, qn, connection):
<<<<<<< HEAD
        sql, params = super(ArrayExact, self).as_sql(qn, connection)
=======
        sql, params = super().as_sql(qn, connection)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        sql = '%s::%s' % (sql, self.lhs.output_field.db_type(connection))
        return sql, params


@ArrayField.register_lookup
class ArrayOverlap(lookups.Overlap):
    def as_sql(self, qn, connection):
<<<<<<< HEAD
        sql, params = super(ArrayOverlap, self).as_sql(qn, connection)
=======
        sql, params = super().as_sql(qn, connection)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        sql = '%s::%s' % (sql, self.lhs.output_field.db_type(connection))
        return sql, params


@ArrayField.register_lookup
class ArrayLenTransform(Transform):
    lookup_name = 'len'
    output_field = IntegerField()

    def as_sql(self, compiler, connection):
        lhs, params = compiler.compile(self.lhs)
        # Distinguish NULL and empty arrays
        return (
            'CASE WHEN %(lhs)s IS NULL THEN NULL ELSE '
            'coalesce(array_length(%(lhs)s, 1), 0) END'
        ) % {'lhs': lhs}, params


@ArrayField.register_lookup
class ArrayInLookup(In):
    def get_prep_lookup(self):
<<<<<<< HEAD
        values = super(ArrayInLookup, self).get_prep_lookup()
=======
        values = super().get_prep_lookup()
        if hasattr(self.rhs, '_prepare'):
            # Subqueries don't need further preparation.
            return values
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        # In.process_rhs() expects values to be hashable, so convert lists
        # to tuples.
        prepared_values = []
        for value in values:
            if hasattr(value, 'resolve_expression'):
                prepared_values.append(value)
            else:
                prepared_values.append(tuple(value))
        return prepared_values


class IndexTransform(Transform):

    def __init__(self, index, base_field, *args, **kwargs):
<<<<<<< HEAD
        super(IndexTransform, self).__init__(*args, **kwargs)
=======
        super().__init__(*args, **kwargs)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        self.index = index
        self.base_field = base_field

    def as_sql(self, compiler, connection):
        lhs, params = compiler.compile(self.lhs)
        return '%s[%s]' % (lhs, self.index), params

    @property
    def output_field(self):
        return self.base_field


<<<<<<< HEAD
class IndexTransformFactory(object):
=======
class IndexTransformFactory:
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

    def __init__(self, index, base_field):
        self.index = index
        self.base_field = base_field

    def __call__(self, *args, **kwargs):
        return IndexTransform(self.index, self.base_field, *args, **kwargs)


class SliceTransform(Transform):

    def __init__(self, start, end, *args, **kwargs):
<<<<<<< HEAD
        super(SliceTransform, self).__init__(*args, **kwargs)
=======
        super().__init__(*args, **kwargs)
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        self.start = start
        self.end = end

    def as_sql(self, compiler, connection):
        lhs, params = compiler.compile(self.lhs)
        return '%s[%s:%s]' % (lhs, self.start, self.end), params


<<<<<<< HEAD
class SliceTransformFactory(object):
=======
class SliceTransformFactory:
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

    def __init__(self, start, end):
        self.start = start
        self.end = end

    def __call__(self, *args, **kwargs):
        return SliceTransform(self.start, self.end, *args, **kwargs)
