<<<<<<< HEAD
from __future__ import unicode_literals

=======
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
from django.core.exceptions import ValidationError
from django.utils.functional import SimpleLazyObject
from django.utils.text import format_lazy


def prefix_validation_error(error, prefix, code, params):
    """
    Prefix a validation error message while maintaining the existing
    validation data structure.
    """
    if error.error_list == [error]:
        error_params = error.params or {}
        return ValidationError(
            # We can't simply concatenate messages since they might require
            # their associated parameters to be expressed correctly which
            # is not something `format_lazy` does. For example, proxied
<<<<<<< HEAD
            # ungettext calls require a count parameter and are converted
            # to an empty string if they are missing it.
            message=format_lazy(
                '{}{}',
=======
            # ngettext calls require a count parameter and are converted
            # to an empty string if they are missing it.
            message=format_lazy(
                '{} {}',
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
                SimpleLazyObject(lambda: prefix % params),
                SimpleLazyObject(lambda: error.message % error_params),
            ),
            code=code,
<<<<<<< HEAD
            params=dict(error_params, **params),
=======
            params={**error_params, **params},
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        )
    return ValidationError([
        prefix_validation_error(e, prefix, code, params) for e in error.error_list
    ])
