<<<<<<< HEAD
from __future__ import unicode_literals

=======
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
import logging

from django.conf import settings
from django.contrib.gis import gdal
<<<<<<< HEAD
from django.contrib.gis.geos import GEOSException, GEOSGeometry
from django.forms.widgets import Widget
from django.utils import six, translation
=======
from django.contrib.gis.geometry import json_regex
from django.contrib.gis.geos import GEOSException, GEOSGeometry
from django.forms.widgets import Widget
from django.utils import translation
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

logger = logging.getLogger('django.contrib.gis')


class BaseGeometryWidget(Widget):
    """
    The base class for rich geometry widgets.
<<<<<<< HEAD
    Renders a map using the WKT of the geometry.
=======
    Render a map using the WKT of the geometry.
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
    """
    geom_type = 'GEOMETRY'
    map_srid = 4326
    map_width = 600
    map_height = 400
    display_raw = False

    supports_3d = False
    template_name = ''  # set on subclasses

    def __init__(self, attrs=None):
        self.attrs = {}
        for key in ('geom_type', 'map_srid', 'map_width', 'map_height', 'display_raw'):
            self.attrs[key] = getattr(self, key)
        if attrs:
            self.attrs.update(attrs)

    def serialize(self, value):
        return value.wkt if value else ''

    def deserialize(self, value):
        try:
<<<<<<< HEAD
            return GEOSGeometry(value, self.map_srid)
        except (GEOSException, ValueError) as err:
=======
            return GEOSGeometry(value)
        except (GEOSException, ValueError, TypeError) as err:
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            logger.error("Error creating geometry from value '%s' (%s)", value, err)
        return None

    def get_context(self, name, value, attrs):
<<<<<<< HEAD
        # If a string reaches here (via a validation error on another
        # field) then just reconstruct the Geometry.
        if value and isinstance(value, six.string_types):
=======
        context = super().get_context(name, value, attrs)
        # If a string reaches here (via a validation error on another
        # field) then just reconstruct the Geometry.
        if value and isinstance(value, str):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            value = self.deserialize(value)

        if value:
            # Check that srid of value and map match
<<<<<<< HEAD
            if value.srid != self.map_srid:
=======
            if value.srid and value.srid != self.map_srid:
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
                try:
                    ogr = value.ogr
                    ogr.transform(self.map_srid)
                    value = ogr
                except gdal.GDALException as err:
                    logger.error(
                        "Error transforming geometry from srid '%s' to srid '%s' (%s)",
                        value.srid, self.map_srid, err
                    )

<<<<<<< HEAD
        if attrs is None:
            attrs = {}

        context = self.build_attrs(self.attrs, dict(
            name=name,
            module='geodjango_%s' % name.replace('-', '_'),  # JS-safe
            serialized=self.serialize(value),
            geom_type=gdal.OGRGeomType(self.attrs['geom_type']),
            STATIC_URL=settings.STATIC_URL,
            LANGUAGE_BIDI=translation.get_language_bidi(),
            **attrs
        ))
=======
        context.update(self.build_attrs(self.attrs, {
            'name': name,
            'module': 'geodjango_%s' % name.replace('-', '_'),  # JS-safe
            'serialized': self.serialize(value),
            'geom_type': gdal.OGRGeomType(self.attrs['geom_type']),
            'STATIC_URL': settings.STATIC_URL,
            'LANGUAGE_BIDI': translation.get_language_bidi(),
            **(attrs or {}),
        }))
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
        return context


class OpenLayersWidget(BaseGeometryWidget):
    template_name = 'gis/openlayers.html'
    map_srid = 3857

    class Media:
        css = {
            'all': (
<<<<<<< HEAD
                'https://cdnjs.cloudflare.com/ajax/libs/ol3/3.20.1/ol.css',
=======
                'https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.css',
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
                'gis/css/ol3.css',
            )
        }
        js = (
<<<<<<< HEAD
            'https://cdnjs.cloudflare.com/ajax/libs/ol3/3.20.1/ol.js',
=======
            'https://cdnjs.cloudflare.com/ajax/libs/ol3/4.6.5/ol.js',
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            'gis/js/OLMapWidget.js',
        )

    def serialize(self, value):
        return value.json if value else ''

<<<<<<< HEAD
=======
    def deserialize(self, value):
        geom = super().deserialize(value)
        # GeoJSON assumes WGS84 (4326). Use the map's SRID instead.
        if geom and json_regex.match(value) and self.map_srid != 4326:
            geom.srid = self.map_srid
        return geom

>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc

class OSMWidget(OpenLayersWidget):
    """
    An OpenLayers/OpenStreetMap-based widget.
    """
    template_name = 'gis/openlayers-osm.html'
    default_lon = 5
    default_lat = 47
<<<<<<< HEAD

    def __init__(self, attrs=None):
        super(OSMWidget, self).__init__()
        for key in ('default_lon', 'default_lat'):
=======
    default_zoom = 12

    def __init__(self, attrs=None):
        super().__init__()
        for key in ('default_lon', 'default_lat', 'default_zoom'):
>>>>>>> a49b7d6bd2068c3888052b51a1a4869cb0918bdc
            self.attrs[key] = getattr(self, key)
        if attrs:
            self.attrs.update(attrs)
